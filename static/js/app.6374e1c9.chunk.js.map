{"version":3,"sources":["constants/colors.js","constants/TextCustom.js","components/EditButton.js","firebaseConfig.js","firebase.js","screens/Account.js","components/PrimaryButton.js","screens/Explore.js","components/SecondaryButton.js","screens/LoginScreen.js","components/DishItem.js","screens/Cart.web.js","screens/EditAccount.js","screens/RestaurantScreen.js","navigation/linking.js","navigation/RootNavigator.web.js","App.js","assets/nonveg.png","assets/veg.png"],"names":["default","light","dark","TextCustom","props","Text","style","styles","text","numberOfLines","children","StyleSheet","create","color","EditButton","TouchableOpacity","onPress","padding","button","colors","textTransform","fontWeight","fontSize","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","initializeApp","firestore","getFirestore","auth","getAuth","Account","useState","update","setUpdate","UID","currentUser","uid","userRef","doc","nameOfUser","setNameOfUser","phone","setPhone","email","setEmail","graduation","setGraduation","useEffect","a","async","getDoc","querySnapshot","data","phoneNumber","Name","Email","graduationYear","getDetails","navigation","useNavigation","Item","View","generalInfoStyles","container","borderColor","borderBottomWidth","paddingVertical","itemText","flexDirection","justifyContent","alignItems","paddingHorizontal","navigate","toUpdate","ScrollView","horizontal","Entypo","name","size","signOut","marginBottom","backgroundColor","PrimaryButton","Platform","OS","androidContainer","width","useWindowDimensions","Pressable","android_ripple","androidPressable","activeOpacity","borderRadius","overflow","height","Explore","selectedHostel","setSelectedHostel","roomNumber","setRoomNumber","roomNo","NaN","hostel","address","setAddress","restaurants","setRestaurants","isAddressModalVisible","setIsAddressModalVisible","getAddress","getRestaurants","setOptions","headerTitle","DeliverTo","handleHostelIdentifier","restaurantArray","getDocs","collection","forEach","push","id","toggleAddressModal","SimpleLineIcons","RestaurantItem","restaurantID","restaurantName","restaurantStyles","imageContainer","Image","source","uri","imageURI","image","detailsContainer","titleText","ratingContainer","marginRight","rating","cuisines","marginTop","searchContainer","Feather","TextInput","placeholder","placeholderTextColor","searchInput","isVisible","onBackButtonPress","animationInTiming","onBackdropPress","addressModalContainer","value","onChangeText","v","replace","keyboardType","textAlign","addressInput","selectedValue","onValueChange","itemValue","itemIndex","mode","dropdownIconColor","label","setDoc","parseInt","merge","FlatList","showsHorizontalScrollIndicator","renderItem","item","keyExtractor","marginHorizontal","flex","heading","borderWidth","alignSelf","borderBottomColor","restaurantContainer","marginVertical","SecondaryButton","LoginScreen","otp","setOtp","verificationId","setVerificationId","handleSendOTP","console","log","setUpRecaptcha","appVerifier","window","recaptchaVerifier","signInWithPhoneNumber","then","confirmationResult","alert","catch","err","current","useRef","useDeviceLanguage","RecaptchaVerifier","response","onSignInSubmit","KeyboardAvoidingView","behavior","ref","attemptInvisibleVerification","nativeID","inputContainer","input","maxLength","onSubmitEditing","buttonContainer","credential","PhoneAuthProvider","signInWithCredential","DishItem","dishStyles","vegIndicatorContainer","isNonVeg","require","vegIndicator","detailsText","dishText","dishName","dishPrice","price","description","cartDishes","includes","addRemoveContainer","plusMinusButton","removeFromCart","AntDesign","quantityText","getQuantity","addToCart","addButton","addText","position","Cart","route","isFocused","useIsFocused","setRestaurantID","setAllDishesData","cartDishIDs","setCartDishIDs","allCartDishesData","setAllCartDishesData","restaurantData","setRestaurantData","uniqueAllCartDishesData","setUniqueAllCartDishesData","setCartPrice","isCartEmpty","setIsCartEmpty","document","createElement","src","fetchCartInfo","tabBarBadge","length","userSnapshot","userData","restoID","cart","restaurantRef","restaurantSnapshot","restoData","cartDishIDsArr","allDishesArr","dishes","cartTotal","cartDishesDataArr","i","j","dishID","unique","el","priceHandler","cartIDS","frequency","num","priceObj","freq","updateCart","arr","emptyCartStyles","animationData","textContainer","star","ratingText","cuisinesContainer","nonveg","removeDishes","index","indexOf","splice","borderTopWidth","marginEnd","animation","EditAccount","params","editName","setEditName","editMail","setEditMail","editGraduation","setEditGraduation","itemStyles","title","autoComplete","editable","autoCapitalize","updateAndCancel","getName","getEmail","toString","getGraduation","margin","RestaurantScreen","setDishes","setCartDishes","doNotRemoveState","setDoNotRemoveState","cartPrice","getDishes","getCart","cartPriceHandler","array","count","dishesArr","SafeAreaView","cartStyles","display","subContainer","linking","prefixes","config","screens","path","Restaurant_Screen","Login","createNativeStackNavigator","Tab","createBottomTabNavigator","Home","setBadgeNumber","addListener","setCartQuantity","Navigator","screenOptions","tabBarIcon","icon","focused","MaterialCommunityIcons","Screen","component","options","MyTheme","DefaultTheme","primary","background","card","RootNavigator","isUserSignedIn","setIsUserSignedIn","isLoading","setIsLoading","onAuthStateChanged","user","setTimeout","AuthStack","AppStack","NavigationContainer","theme","headerShown","App","LogBox","ignoreAllLogs","StatusBar","module","exports"],"mappings":"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","file":"static/js/app.6374e1c9.chunk.js","sourcesContent":["export default {\r\n    primary: '#ffff',\r\n    // #F56694\r\n    // #EA7C69\r\n    // #fb8500\r\n    secondary: '#9288E0',\r\n    background: '#111111',\r\n    // #100F0F\r\n    dark: '#111111',\r\n    light: '#ABBBC2',\r\n    lighter: '#E0E6E9',\r\n    text: {\r\n        default:'#ffff',\r\n        light: '#ABBBC2',\r\n        dark: '#111111',\r\n    }\r\n}","import React, { Children } from 'react'\r\nimport { StyleSheet, Text, View } from 'react-native'\r\nimport colors from './colors'\r\n\r\nconst TextCustom = (props) => {\r\n    return (<Text style={{ ...styles.text, ...props.style }} numberOfLines={props.numberOfLines}>\r\n        {props.children}\r\n    </Text>\r\n    )\r\n}\r\n\r\nexport default TextCustom\r\n\r\nconst styles = StyleSheet.create({\r\n    text: {\r\n        color: 'white'\r\n    }\r\n})\r\n","import React from 'react'\r\nimport { StyleSheet, Text, TouchableOpacity, View } from 'react-native'\r\nimport colors from '../constants/colors'\r\n\r\nconst EditButton = (props) => {\r\n    return (\r\n        <TouchableOpacity onPress={props.onPress} style={{ padding: 5 }}>\r\n            <Text style={styles.button}>{props.text}</Text>\r\n        </TouchableOpacity>\r\n    )\r\n}\r\n\r\nexport default EditButton\r\n\r\nconst styles = StyleSheet.create({\r\n    button: {\r\n        color: colors.primary,\r\n        textTransform: 'uppercase',\r\n        fontWeight: '700',\r\n        fontSize: 12\r\n    }\r\n})\r\n","// Your web app's Firebase configuration\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyD5xpTIRjYNhsIfoUa6kaU6OveLp5yxPjk\",\r\n    authDomain: \"beta.fooddelivery.com\",\r\n    projectId: \"food-delivery-6fbf3\",\r\n    storageBucket: \"food-delivery-6fbf3.appspot.com\",\r\n    messagingSenderId: \"657371352578\",\r\n    appId: \"1:657371352578:web:b15cd7862ca52a102a611b\"\r\n};\r\n\r\nexport {firebaseConfig}","// Import the functions you need from the SDKs you need\r\n// import * as firebase from \"firebase\";\r\nimport { initializeApp } from 'firebase/app';\r\nimport { firebaseConfig } from \"./firebaseConfig\";\r\nimport { getAuth } from \"firebase/auth\";\r\nimport { getFirestore } from \"firebase/firestore\";\r\n\r\n\r\n// TODO: Add SDKs for Firebase products that you want to use\r\n// https://firebase.google.com/docs/web/setup#available-libraries\r\n\r\n// Initialize Firebase\r\n// let app\r\n// if (firebase.apps.length == 0) {\r\n//     app = initializeApp(firebaseConfig);\r\n// }\r\n// else{\r\n//     app = app()\r\n// }\r\n\r\ninitializeApp(firebaseConfig)\r\n\r\nconst firestore = getFirestore()\r\nconst auth = getAuth()\r\n\r\nexport { auth }\r\nexport { firestore }","import React, { useEffect, useState } from 'react'\r\nimport { ScrollView, StyleSheet, Text, TouchableOpacity, View } from 'react-native'\r\nimport colors from '../constants/colors'\r\nimport TextCustom from '../constants/TextCustom'\r\nimport { Entypo } from '@expo/vector-icons';\r\nimport { useNavigation } from '@react-navigation/core';\r\nimport EditButton from '../components/EditButton';\r\nimport { auth, firestore } from '../firebase';\r\nimport { doc, getDoc } from 'firebase/firestore';\r\n\r\nconst Account = () => {\r\n    const [update, setUpdate] = useState(false)\r\n\r\n    const UID = auth.currentUser.uid\r\n    const userRef = doc(firestore, 'users',UID)\r\n\r\n    const [nameOfUser, setNameOfUser] = useState('Hello user')\r\n    const [phone, setPhone] = useState(9999999999)\r\n    const [email, setEmail] = useState('user@comapny.com')\r\n    const [graduation, setGraduation] = useState(1999)\r\n\r\n    useEffect(() => {\r\n\r\n        const getDetails = async() =>{\r\n            const querySnapshot = await getDoc(userRef)\r\n            let data = querySnapshot.data()\r\n            setPhone(auth.currentUser.phoneNumber)\r\n            if (data) {\r\n                if(data.Name){\r\n                    setNameOfUser(data.Name)\r\n                }\r\n                if (data.Email) {\r\n                    setEmail(data.Email)\r\n                }\r\n                if (data.graduationYear) {\r\n                    setGraduation(data.graduationYear)\r\n                }\r\n                // console.log(doc.data())\r\n                setUpdate(false)\r\n    \r\n                // get initial input state from firestore\r\n            }\r\n        }\r\n        getDetails()\r\n        return\r\n    }, [update!=false])\r\n\r\n    const handleSignOut = () => {\r\n        auth\r\n            .signOut()\r\n    }\r\n\r\n    const navigation = useNavigation()\r\n\r\n    const Item = (props) => {\r\n        return (\r\n            <View onPress={props.onPress} style={[generalInfoStyles.container, { borderColor: colors.light, borderBottomWidth:0, paddingVertical:15}]}>\r\n                <TouchableOpacity onPress={props.onPress}>\r\n                    <Text style={styles.itemText}>{props.text}</Text>\r\n                </TouchableOpacity>\r\n            </View>\r\n        )\r\n    }\r\n    const GeneralInfo = () => {\r\n        return (\r\n            <View style={[generalInfoStyles.container]}>\r\n                <View style={{ flexDirection: 'row', justifyContent: 'space-between', alignItems: 'center', paddingHorizontal: 2, paddingVertical: 5 }}>\r\n                    <Text style={{ textTransform: 'uppercase', fontSize: 18, fontWeight: '700', color:colors.text.default  }}>{nameOfUser}</Text>\r\n                    <EditButton text=\"Edit\" onPress={() => navigation.navigate('Edit_Account',{\r\n                        toUpdate:setUpdate\r\n                    })} />\r\n                </View>\r\n                <ScrollView horizontal>\r\n                    <View style={{ flexDirection: 'row', alignItems: 'center' }}>\r\n                        <Text style={{ color: colors.text.light }}>{phone}</Text>\r\n                        <Entypo name=\"dot-single\" size={24} color={colors.light} />\r\n                        <Text style={{ color: colors.text.light }}>{email}</Text>\r\n                        <Entypo name=\"dot-single\" size={24} color={colors.light} />\r\n                        <Text style={{ color: colors.text.light }}>{graduation}</Text>\r\n                    </View>\r\n                </ScrollView>\r\n            </View>\r\n        )\r\n    }\r\n    return (\r\n        <View>\r\n            <GeneralInfo />\r\n            <Item text=\"Orders\"  />\r\n            <Item text=\"Logout\" onPress={() => handleSignOut()} />\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default Account\r\n\r\nconst generalInfoStyles = StyleSheet.create({\r\n    container: {\r\n        borderBottomWidth: 3,\r\n        borderColor: colors.primary,\r\n        paddingHorizontal: 10,\r\n        paddingVertical: 10,\r\n        marginBottom:10,\r\n        backgroundColor:colors.dark\r\n    }\r\n})\r\nconst styles = StyleSheet.create({\r\n    itemText:{\r\n        color: colors.text.default,\r\n        textTransform:'uppercase',\r\n        fontWeight:'700'\r\n    }\r\n})\r\n","import React from 'react'\r\nimport { StyleSheet, Text, View, useWindowDimensions, TouchableOpacity, Pressable, Platform } from 'react-native'\r\nimport colors from '../constants/colors'\r\n\r\nconst PrimaryButton = (props) => {\r\n    return (\r\n        <>\r\n            {Platform.OS == \"android\" ?\r\n                <View style={[styles.androidContainer, { ...props.style, width: 0.4 * useWindowDimensions().width }]}>\r\n                    <Pressable android_ripple={{ color: colors.light }}\r\n                        style={styles.androidPressable}\r\n                        onPress={props.onPress}>\r\n                        <View style={styles.container}>\r\n                            <Text style={styles.text}>{props.text}</Text>\r\n                        </View>\r\n                    </Pressable>\r\n                </View>\r\n                :\r\n                <TouchableOpacity activeOpacity={0.7} onPress={props.onPress} style={{ ...props.style, width: 0.4 * useWindowDimensions().width }}>\r\n                    <View style={[styles.container, { backgroundColor: colors.primary, borderRadius: 5 }]}>\r\n                        <Text style={styles.text}>{props.text}</Text>\r\n                    </View>\r\n                </TouchableOpacity>\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default PrimaryButton\r\n\r\nconst styles = StyleSheet.create({\r\n    androidContainer: {\r\n        overflow: \"hidden\",\r\n        borderRadius: 5\r\n    },\r\n    androidPressable: {\r\n        backgroundColor: colors.primary\r\n    },\r\n    container: {\r\n        width: '100%',\r\n        height: 45,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    text: {\r\n        textTransform: 'uppercase',\r\n        color: colors.text.dark,\r\n        fontWeight: '700',\r\n        fontSize: 15\r\n    }\r\n\r\n})\r\n","import { useNavigation } from '@react-navigation/core'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { SafeAreaView, StyleSheet, Text, TouchableOpacity, View, useWindowDimensions, TextInput, Image, FlatList, Platform } from 'react-native'\r\nimport TextCustom from '../constants/TextCustom'\r\nimport { auth, firestore } from '../firebase'\r\nimport { SimpleLineIcons } from '@expo/vector-icons';\r\nimport { Entypo } from '@expo/vector-icons';\r\nimport colors from '../constants/colors'\r\nimport { Feather } from '@expo/vector-icons';\r\nimport Modal from \"react-native-modal\";\r\nimport { Picker } from '@react-native-picker/picker'\r\nimport PrimaryButton from '../components/PrimaryButton'\r\nimport { collection, doc, getDoc, getDocs, setDoc } from \"firebase/firestore\"; \r\n\r\nconst Explore = () => {\r\n\r\n    const [selectedHostel, setSelectedHostel] = useState()\r\n    const [roomNumber, setRoomNumber] = useState()\r\n    const [address, setAddress] = useState({ roomNo: NaN, hostel: null })\r\n    const [restaurants, setRestaurants] = useState([])\r\n    const [isAddressModalVisible, setIsAddressModalVisible] = useState(false)\r\n    const [count, setCount] = useState(0)\r\n\r\n    const user = auth.currentUser\r\n    const UID = user.uid\r\n    const userRef = doc(firestore, 'users', UID)\r\n\r\n    useEffect(() => {\r\n        const getAddress = async() =>{\r\n            const querySnapshot = await getDoc(userRef)\r\n            let data = querySnapshot.data()\r\n            if (data.address) {\r\n                setAddress({ roomNo: data.address.roomNumber, hostel: data.address.hostel })\r\n            }\r\n        }\r\n        getAddress()\r\n        return\r\n    }, [])\r\n    useEffect(() => {\r\n        getRestaurants()\r\n        return\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        navigation.setOptions({\r\n            headerTitle: () => <DeliverTo />\r\n        })\r\n    }, [address])\r\n\r\n    const navigation = useNavigation()\r\n\r\n\r\n\r\n    let handleHostelIdentifier\r\n    if (address.hostel == 'girls') {\r\n        handleHostelIdentifier = \"Girls\"\r\n    }\r\n    else if (address.hostel == 'boys1') {\r\n        handleHostelIdentifier = \"Boys(Old)\"\r\n    }\r\n    else if (address.hostel == 'boys2') {\r\n        handleHostelIdentifier = \"Boys(New)\"\r\n    }\r\n    else {\r\n        handleHostelIdentifier = NaN\r\n    }\r\n\r\n\r\n    let restaurantArray = []\r\n    const getRestaurants = async () => {\r\n        const querySnapshot = await getDocs(collection(firestore,'restaurants'))\r\n        querySnapshot.forEach((doc)=>{\r\n            restaurantArray.push({...doc.data(), id:doc.id})\r\n        })\r\n        setRestaurants(restaurantArray)\r\n    }\r\n    const DeliverTo = () => {\r\n        return (\r\n            <View>\r\n                <TouchableOpacity style={{ flexDirection: 'row', alignItems: 'flex-end', justifyContent:Platform.OS==\"ios\"?\"center\":null }} onPress={toggleAddressModal}>\r\n                    <Text style={{color:colors.text.default}}>Deliver to  </Text>\r\n                    <SimpleLineIcons name=\"arrow-down\" size={14} color=\"white\" />\r\n                </TouchableOpacity>\r\n                <TextCustom style={{ color: colors.primary }} numberOfLines={1}>{address.roomNo} Room number in {handleHostelIdentifier} Hostel </TextCustom>\r\n            </View>)\r\n    }\r\n\r\n    const toggleAddressModal = () => {\r\n        setIsAddressModalVisible(!isAddressModalVisible)\r\n    }\r\n\r\n    const Search = () => {\r\n        return <View style={[styles.searchContainer]}>\r\n            <Feather name=\"search\" size={20} color={colors.light} />\r\n            <TextInput placeholder=\"Search for food, restaurant, etc.\" placeholderTextColor={colors.text.light} style={styles.searchInput} numberOfLines={1} />\r\n        </View>\r\n    }\r\n\r\n    const handleSaveAddress = async () => {\r\n        setAddress({ roomNo: roomNumber, hostel: selectedHostel })\r\n        toggleAddressModal()\r\n\r\n        setDoc(userRef, {address: {\r\n            roomNumber: parseInt(roomNumber),\r\n            hostel: selectedHostel\r\n        }}, {merge:true})\r\n    }\r\n\r\n    const RestaurantItem = (props) => {\r\n        return (\r\n            <TouchableOpacity activeOpacity={0.7} onPress={() => navigation.navigate('Restaurant_Screen', { restaurantID: props.id, restaurantName: props.name})} style={[restaurantStyles.container, { width: useWindowDimensions().width }]}>\r\n                <View style={restaurantStyles.imageContainer}>\r\n                    <Image source={{ uri: props.imageURI }} style={restaurantStyles.image} />\r\n                </View>\r\n                <View style={restaurantStyles.detailsContainer}>\r\n                    <Text numberOfLines={1} style={[restaurantStyles.titleText, { color: colors.text.default, }]}>{props.name}</Text>\r\n                    <View style={[restaurantStyles.ratingContainer,]}>\r\n                        <Entypo name=\"star\" size={16} color={colors.light} style={{ marginRight: 5 }} />\r\n                        <View>\r\n                            <Text style={restaurantStyles.rating}>{props.rating ? props.rating : \"Not available\"}</Text>\r\n                        </View>\r\n                    </View>\r\n                    <View>\r\n                        <Text numberOfLines={1} style={restaurantStyles.cuisines}>\r\n                            {props.cuisines}\r\n                        </Text>\r\n                    </View>\r\n                </View>\r\n            </TouchableOpacity>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <View style={styles.container}>\r\n            <View style={{ alignItems: 'center', marginTop: 10 }}>\r\n                <Search />\r\n            </View>\r\n            <Modal isVisible={isAddressModalVisible} onBackButtonPress={toggleAddressModal} animationInTiming={200} onBackdropPress={toggleAddressModal}>\r\n                <View style={styles.addressModalContainer}>\r\n                    <TextInput\r\n                        value={roomNumber}\r\n                        onChangeText={(v) => setRoomNumber(v.replace(/[^0-9]/g, ''))}\r\n                        placeholder=\"Room Number\"\r\n                        placeholderTextColor={colors.text.light}\r\n                        keyboardType=\"number-pad\"\r\n                        textAlign=\"center\"\r\n                        style={styles.addressInput} />\r\n                    <Text style={{ color: colors.text.light }}>Select hostel</Text>\r\n                    <Picker\r\n                        selectedValue={selectedHostel}\r\n                        onValueChange={(itemValue, itemIndex) =>\r\n                            setSelectedHostel(itemValue)\r\n                        }\r\n                        style={{ width: '80%', color: colors.text.light, alignItems: 'center' }}\r\n                        mode=\"dropdown\"\r\n                        dropdownIconColor={colors.light}\r\n                    >\r\n                        <Picker.Item label=\"Girls\" value=\"girls\" />\r\n                        <Picker.Item label=\"Boys(Old)\" value=\"boys1\" />\r\n                        <Picker.Item label=\"Boys(New)\" value=\"boys2\" />\r\n                    </Picker>\r\n                    <PrimaryButton text=\"Save Address\" onPress={handleSaveAddress} />\r\n                </View>\r\n            </Modal>\r\n\r\n            <FlatList\r\n                showsHorizontalScrollIndicator={false}\r\n                data={restaurants}\r\n                renderItem={({ item }) => <RestaurantItem name={item.restaurantName} rating={item.rating} cuisines={item.cuisines} imageURI={item.imageURI} id={item.id} />}\r\n                keyExtractor={item => item.id}\r\n            />\r\n        </View>\r\n    )\r\n}\r\n\r\n\r\nexport default Explore\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        marginHorizontal: 10,\r\n        flex: 1\r\n    },\r\n    heading: {\r\n        fontSize: 28\r\n    },\r\n    searchContainer: {\r\n        flexDirection: 'row',\r\n        borderWidth: 1,\r\n        borderColor: colors.light,\r\n        borderRadius: 10,\r\n        padding: 10,\r\n        paddingHorizontal: 15,\r\n        alignItems: 'center',\r\n        width: '100%'\r\n    },\r\n    searchInput: {\r\n        marginHorizontal: 20\r\n    },\r\n    addressModalContainer: {\r\n        width: '75%',\r\n        paddingVertical: 20,\r\n        backgroundColor: colors.dark,\r\n        borderRadius: 10,\r\n        alignSelf: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    addressInput: {\r\n        color: colors.text.default,\r\n        borderBottomWidth: 1,\r\n        borderBottomColor: colors.text.light,\r\n        width: '70%',\r\n        marginBottom: 20\r\n    },\r\n    restaurantContainer: {\r\n        height: 100,\r\n        marginVertical: 10,\r\n        flexDirection: 'row'\r\n    }\r\n})\r\n\r\nconst restaurantStyles = StyleSheet.create({\r\n    container: {\r\n        height: 100,\r\n        marginVertical: 10,\r\n        flexDirection: 'row'\r\n    },\r\n    imageContainer: {\r\n        height: '100%',\r\n        width: '25%'\r\n    },\r\n    image: {\r\n        height: '100%',\r\n        width: '100%',\r\n        borderRadius: 5\r\n    },\r\n    detailsContainer: {\r\n        height: '100%', width: '75%',\r\n        justifyContent: 'center',\r\n        padding: 20\r\n    },\r\n    titleText: {\r\n        fontSize: 16,\r\n        fontWeight: 'bold',\r\n    },\r\n    ratingContainer: {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginVertical: 2\r\n    },\r\n    rating: {\r\n        color: colors.light,\r\n        fontWeight: '700',\r\n        fontSize: 12\r\n    },\r\n    cuisines: {\r\n        color: colors.light\r\n    }\r\n\r\n})\r\n","import React from 'react'\r\nimport { StyleSheet, Text, View, useWindowDimensions, TouchableOpacity, Pressable, Platform } from 'react-native'\r\nimport colors from '../constants/colors'\r\n\r\nconst SecondaryButton = (props) => {\r\n    return (\r\n        <>\r\n            {Platform.OS == \"android\" ?\r\n                <Pressable android_ripple={{ color: colors.primary }} onPress={props.onPress} style={{ width: 0.4 * useWindowDimensions().width, ...props.style }}>\r\n                    <View style={styles.container}>\r\n                        <Text style={styles.text}>{props.text}</Text>\r\n                    </View>\r\n                </Pressable> :\r\n                <TouchableOpacity activeOpacity={0.7} onPress={props.onPress} style={{ width: 0.4 * useWindowDimensions().width, ...props.style }}>\r\n                    <View style={styles.container}>\r\n                        <Text style={styles.text}>{props.text}</Text>\r\n                    </View>\r\n                </TouchableOpacity>\r\n            }\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default SecondaryButton\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        width: '100%',\r\n        borderRadius: 5,\r\n        borderWidth: 1,\r\n        borderColor: colors.primary,\r\n        height: 45,\r\n        alignItems: 'center',\r\n        justifyContent: 'center'\r\n    },\r\n    text: {\r\n        textTransform: 'uppercase',\r\n        color: colors.primary,\r\n        fontWeight: '700',\r\n        fontSize: 15\r\n    }\r\n})\r\n","import { useNavigation } from '@react-navigation/core'\r\nimport { FirebaseRecaptchaVerifierModal } from 'expo-firebase-recaptcha';\r\nimport React, { useRef, useState, useEffect } from 'react'\r\nimport { Keyboard, KeyboardAvoidingView, Platform, StyleSheet, Text, TextInput, TouchableOpacity, TouchableWithoutFeedback, View } from 'react-native'\r\nimport { auth } from '../firebase'\r\nimport { firebaseConfig } from '../firebaseConfig'\r\n// import * as firebase from 'firebase'\r\nimport colors from '../constants/colors';\r\nimport PrimaryButton from '../components/PrimaryButton'\r\nimport SecondaryButton from '../components/SecondaryButton';\r\nimport { PhoneAuthProvider, RecaptchaVerifier, signInWithCredential, signInWithPhoneNumber } from \"firebase/auth\";\r\nimport { initializeApp } from 'firebase/app';\r\n\r\nconst LoginScreen = () => {\r\n\r\n    const [phone, setPhone] = useState()\r\n    const [otp, setOtp] = useState()\r\n    const [verificationId, setVerificationId] = useState();\r\n\r\n    const handleSendOTP = async () => {\r\n        if (Platform.OS == \"web\") {\r\n            var phoneNumber = `+91${phone}`\r\n            console.log(phoneNumber)\r\n            setUpRecaptcha()\r\n            var appVerifier = window.recaptchaVerifier\r\n            signInWithPhoneNumber(auth, phoneNumber, appVerifier).then((confirmationResult) => {\r\n                alert(\"OTP has been sent\")\r\n                setVerificationId(confirmationResult)\r\n            }).catch((err) => alert(err))\r\n        }\r\n\r\n        else {\r\n            try {\r\n                const verificationId = await signInWithPhoneNumber(\r\n                    auth,\r\n                    `+91${phone}`,\r\n                    recaptchaVerifier.current\r\n                );\r\n                setVerificationId(verificationId);\r\n                alert(\"OTP has been sent\")\r\n            } catch (err) {\r\n                alert(err)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    const handleVerifyOTP = async () => {\r\n        try {\r\n            const credential = PhoneAuthProvider.credential(\r\n                verificationId.verificationId,\r\n                otp\r\n            );\r\n            await signInWithCredential(auth, credential);\r\n            alert(\"Phone verification successful\")\r\n        } catch (err) {\r\n            alert(err)\r\n        }\r\n    }\r\n\r\n    const recaptchaVerifier = useRef(null);\r\n    const attemptInvisibleVerification = true;\r\n\r\n    auth.useDeviceLanguage()\r\n\r\n    const setUpRecaptcha = () => {\r\n        window.recaptchaVerifier = new RecaptchaVerifier('recaptcha-container', {\r\n            'size': 'invisible',\r\n            'callback': (response) => {\r\n                // reCAPTCHA solved, allow signInWithPhoneNumber.\r\n                onSignInSubmit();\r\n            }\r\n        }, auth);\r\n    }\r\n\r\n    return (\r\n        // <TouchableWithoutFeedback onPress={Keyboard.dismiss} accessible={false}>\r\n        <KeyboardAvoidingView behavior={Platform.OS == 'ios' ? \"padding\" : 'height'}\r\n            style={styles.container}\r\n        >\r\n            {Platform.OS != \"web\" ?\r\n                <FirebaseRecaptchaVerifierModal\r\n                    ref={recaptchaVerifier}\r\n                    firebaseConfig={firebaseConfig}\r\n                    attemptInvisibleVerification={attemptInvisibleVerification}\r\n                /> :\r\n                <View nativeID='recaptcha-container' />\r\n            }\r\n\r\n            <View style={styles.inputContainer}>\r\n                <View style={[{ flexDirection: 'row', alignItems: 'center' }, styles.input]}>\r\n                    <Text style={{ marginRight: 10, color: 'black' }}>\r\n                        +91\r\n                    </Text>\r\n                    <TextInput\r\n                        placeholder=\"Mobile Number\"\r\n                        value={phone}\r\n                        onChangeText={v => setPhone(v.replace(/[^0-9]/g, ''))}\r\n                        keyboardType=\"number-pad\"\r\n                        style={{ width: '90%' }}\r\n                        maxLength={10}\r\n                        onSubmitEditing={handleSendOTP}\r\n                    />\r\n                </View>\r\n\r\n                <TextInput\r\n                    placeholder=\"OTP\"\r\n                    value={otp}\r\n                    onChangeText={v => setOtp(v.replace(/[^0-9]/g, ''))}\r\n                    style={styles.input}\r\n                    keyboardType=\"number-pad\"\r\n                    maxLength={6}\r\n                />\r\n            </View>\r\n            <View style={styles.buttonContainer}>\r\n                <PrimaryButton onPress={handleSendOTP} text=\"Send OTP\" style={{ marginBottom: 10 }} />\r\n                <SecondaryButton text=\"Verify\" onPress={handleVerifyOTP} />\r\n            </View>\r\n        </KeyboardAvoidingView>\r\n        // </TouchableWithoutFeedback>\r\n    )\r\n}\r\n\r\nexport default LoginScreen\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flex: 1\r\n    },\r\n    inputContainer: {\r\n        width: '80%'\r\n    },\r\n    input: {\r\n        backgroundColor: 'white',\r\n        paddingHorizontal: 15,\r\n        paddingVertical: 10,\r\n        borderRadius: 10,\r\n        marginTop: 5,\r\n    },\r\n    buttonContainer: {\r\n        width: '60%',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        marginTop: 20\r\n    },\r\n})\r\n","import React from 'react'\r\nimport { Image, Platform, Pressable, StyleSheet, Text, TouchableOpacity, View } from 'react-native'\r\nimport colors from '../constants/colors';\r\nimport { AntDesign } from '@expo/vector-icons';\r\n\r\n\r\nconst DishItem = (props) => (\r\n    <View style={[dishStyles.container, { height: props.image ? 150 : 100 }]}>\r\n        <View style={dishStyles.detailsContainer}>\r\n            <View style={dishStyles.vegIndicatorContainer}>\r\n                {props.isNonVeg ?\r\n                    <Image source={require('../assets/nonveg.png')} style={dishStyles.vegIndicator} /> :\r\n                    <Image source={require('../assets/veg.png')} style={dishStyles.vegIndicator} />\r\n                }\r\n            </View>\r\n            <View style={dishStyles.detailsText}>\r\n                <Text style={dishStyles.dishText}>{props.dishName}</Text>\r\n                <Text style={dishStyles.dishPrice}>₹{props.price}</Text>\r\n                {props.description ? <Text style={dishStyles.description} numberOfLines={2} >{props.description}</Text> : null}\r\n            </View>\r\n        </View>\r\n        <View style={[dishStyles.imageContainer, { justifyContent: props.image ? 'flex-end' : 'center' }]}>\r\n            <Image source={{ uri: props.image?props.image:null }} style={dishStyles.image} />\r\n\r\n            <View style={dishStyles.button}>\r\n                {!(props.cartDishes).includes(props.id) ?\r\n                    Platform.OS == \"android\" ?\r\n                        <Pressable style={dishStyles.addButton} android_ripple={{ color: colors.light }} onPress={props.addToCart}>\r\n                            <Text style={dishStyles.addText}>Add</Text>\r\n                        </Pressable>\r\n                        :\r\n                        <TouchableOpacity style={dishStyles.addButton} onPress={props.addToCart}>\r\n                            <Text style={dishStyles.addText}>Add</Text>\r\n                        </TouchableOpacity>\r\n                    :\r\n                    <View style={dishStyles.addRemoveContainer}>\r\n                        <TouchableOpacity style={dishStyles.plusMinusButton} onPress={props.removeFromCart}>\r\n                            <AntDesign name=\"minus\" size={16} color={colors.text.dark} />\r\n                        </TouchableOpacity>\r\n                        <Text style={dishStyles.quantityText}>{props.getQuantity}{/* dynamically change quantity, no of occurence of id in the array cartDishes */}</Text>\r\n                        <TouchableOpacity style={dishStyles.plusMinusButton} onPress={props.addToCart} /* on Press, push the item id to the array*/>\r\n                            <AntDesign name=\"plus\" size={16} color={colors.text.dark} />\r\n                        </TouchableOpacity>\r\n                    </View>\r\n                }\r\n            </View>\r\n        </View>\r\n    </View>\r\n);\r\n\r\nexport default DishItem\r\n\r\n\r\nconst dishStyles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: \"row\",\r\n        borderBottomWidth: 0.5,\r\n        paddingVertical: 10,\r\n        borderColor: colors.light,\r\n    },\r\n    detailsContainer: {\r\n        width: \"65%\",\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n    },\r\n    vegIndicatorContainer: {\r\n        marginRight: 12,\r\n    },\r\n    vegIndicator: {\r\n        height: 20,\r\n        width: 20,\r\n    },\r\n    detailsText: {\r\n        flex: 1\r\n    },\r\n    dishText: {\r\n        color: colors.text.default,\r\n        fontWeight: 'bold',\r\n        fontSize: 16\r\n    },\r\n    dishPrice: {\r\n        color: colors.text.light\r\n    },\r\n    description: {\r\n        color: colors.text.light,\r\n        fontSize: 10\r\n    },\r\n    imageContainer: {\r\n        width: \"35%\",\r\n        alignItems: 'center',\r\n    },\r\n    image: {\r\n        width: '100%',\r\n        height: '100%',\r\n        borderRadius: 10\r\n    },\r\n    button: {\r\n        position: 'absolute',\r\n        backgroundColor: colors.text.default,\r\n        width: '60%',\r\n        borderRadius: 5,\r\n        height: 30,\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    addButton: {\r\n        width: '100%',\r\n        alignItems: 'center',\r\n        height: '100%',\r\n        justifyContent: 'center'\r\n    },\r\n    addRemoveContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n        width: '100%',\r\n        alignItems: 'center',\r\n        height: '100%'\r\n    },\r\n    plusMinusButton: {\r\n        height: '100%', flex: 1,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    quantityText: {\r\n        flex: 0.7,\r\n        textAlign: 'center',\r\n        color: colors.text.dark,\r\n    },\r\n    addText: {\r\n        color: colors.text.dark,\r\n        fontWeight: '700',\r\n        textTransform: 'uppercase'\r\n    }\r\n\r\n});","import React, { useEffect, useState } from 'react'\r\nimport { FlatList, Image, Platform, Pressable, StyleSheet, Text, TouchableOpacity, View } from 'react-native'\r\nimport colors from '../constants/colors'\r\nimport { auth, firestore } from '../firebase';\r\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\r\nimport DishItem from '../components/DishItem';\r\nimport { Entypo } from '@expo/vector-icons';\r\nimport LottieView from 'lottie-react-native';\r\nimport { getAuth } from 'firebase/auth';\r\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\r\nimport Lottie from 'lottie-react';\r\n\r\nconst Cart = ({ route, navigation }) => {\r\n    const auth = getAuth()\r\n    const UID = auth.currentUser.uid\r\n    const userRef = doc(firestore, 'users', UID)\r\n\r\n    let isFocused = useIsFocused()\r\n\r\n    const [restaurantID, setRestaurantID] = useState('')\r\n    const [allDishesData, setAllDishesData] = useState([])\r\n    const [cartDishIDs, setCartDishIDs] = useState([])\r\n    const [allCartDishesData, setAllCartDishesData] = useState([])\r\n    const [restaurantData, setRestaurantData] = useState({})\r\n    const [uniqueAllCartDishesData, setUniqueAllCartDishesData] = useState([])\r\n    const [cartPrice, setCartPrice] = useState(0)\r\n    const [isCartEmpty, setIsCartEmpty] = useState(true)\r\n\r\n\r\n    useEffect(() => {\r\n        const script = document.createElement(\"script\")\r\n        script.src = \"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"\r\n    }, [])\r\n\r\n\r\n\r\n    // re- renders every time the screen is brought to focus \r\n    useEffect(() => {\r\n        fetchCartInfo()\r\n    }, [isFocused ])\r\n\r\n    // sets the tab bar badge to the amount of items in the cart\r\n    useEffect(() => {\r\n        navigation.setOptions({\r\n            tabBarBadge: cartDishIDs.length\r\n        })\r\n        if (cartDishIDs.length != 0) {\r\n            setIsCartEmpty(false)\r\n        }\r\n        else {\r\n            setIsCartEmpty(true)\r\n        }\r\n    }, [cartDishIDs])\r\n\r\n    useEffect(async() => {\r\n        const userSnapshot = await getDoc(userRef)\r\n        const userData = userSnapshot.data()\r\n        let restoID = userData.cart.restaurantID\r\n        setRestaurantID(restoID)\r\n        const restaurantRef = doc(firestore, 'restaurants', restoID)\r\n        const restaurantSnapshot = await getDoc(restaurantRef)\r\n        let restoData = restaurantSnapshot.data()\r\n        setRestaurantData(restoData)\r\n    }, [])\r\n\r\n    // fetches the IDs of dishes in the cart and stores in a state variable\r\n    const fetchCartInfo = async () => {\r\n        const userSnapshot = await getDoc(userRef)\r\n        // data from the logged in user stored in \"data\"\r\n        let data = userSnapshot.data()\r\n        let cartDishIDsArr = []\r\n        let allDishesArr = []\r\n        if (data.cart) {\r\n            // array of all the IDs of dishes added in the cart of the user\r\n            cartDishIDsArr = data.cart.dishes\r\n            setCartDishIDs(data.cart.dishes)\r\n            setCartPrice(data.cart.cartTotal)\r\n\r\n            // restaurant ID of the restaurant whose dishes are in cart\r\n            setRestaurantID(data.cart.restaurantID)\r\n            let restoID = data.cart.restaurantID\r\n\r\n            const restaurantRef = doc(firestore, 'restaurants', restoID)\r\n            const restaurantSnapshot = await getDoc(restaurantRef)\r\n\r\n            // restaurant data stored in restoData\r\n            let restoData = restaurantSnapshot.data()\r\n\r\n            // list of all dishes from that restaurant\r\n            allDishesArr = restoData.dishes\r\n            setAllDishesData(restoData.dishes)\r\n\r\n            // array of data of dishes in cart with information like price, non veg, name, dishID, etc. \r\n            let cartDishesDataArr = []\r\n            for (var i of allDishesArr) {\r\n                for (var j of cartDishIDsArr) {\r\n                    if (i.dishID == j) {\r\n                        cartDishesDataArr.push(i)\r\n                    }\r\n                }\r\n            }\r\n            setAllCartDishesData(cartDishesDataArr)\r\n\r\n            let arr = cartDishesDataArr\r\n            let unique = []\r\n            for (let el of arr) {\r\n                if (!unique.includes(el)) {\r\n                    unique.push(el)\r\n                }\r\n            }\r\n            // setting only the unique cart dishes which is later used to render Flatlist. Used for rendering only the unique dishes in the flatlist and later increasing the quantity only without adding more items to Flatlist \r\n            setUniqueAllCartDishesData(unique)\r\n        }\r\n    }\r\n\r\n    // Responsible for handling the total cart value => returns total cart value (number) \r\n    const priceHandler = (cartIDS) => {\r\n        let frequency = {}\r\n        for (let num of cartIDS) {\r\n            frequency[num] = frequency[num] ? frequency[num] + 1 : 1\r\n        }\r\n        // This gives me frequency of cart Items as {\"dishID\": occurrences, \"anotherDishID\": occurrences }\r\n\r\n        let priceObj = {}\r\n        allCartDishesData.forEach(el => {\r\n            priceObj[el.dishID] = el.price\r\n        })\r\n        // This gives me priceObj as {\"dishID\":itsPrice, \"anotherDishID\":itsPrice}\r\n\r\n        let price = 0\r\n        for (let i in priceObj) {\r\n            for (let j in frequency) {\r\n                if (j == i) {\r\n                    price += (priceObj[i] * frequency[j])\r\n                }\r\n            }\r\n        }\r\n        setCartPrice(price)\r\n        return price\r\n    }\r\n\r\n\r\n    // Returns the quantity of every dish in the cart => Return type = number\r\n    const getQuantity = (id) => {\r\n        let freq = {}\r\n        let arr = [...cartDishIDs]\r\n        for (let num of arr) {\r\n            freq[num] = freq[num] ? freq[num] + 1 : 1\r\n        }\r\n        return freq[id]\r\n    }\r\n\r\n    // Responsible for updating changes to the firestore database. Changes => array of dishIDs, restaurantID (whose dishes are in the cart), cartTotal\r\n    const updateCart = async (arr, price) => {\r\n        setDoc(userRef, {\r\n            cart: {\r\n                dishes: arr,\r\n                restaurantID: restaurantID,\r\n                cartTotal: price\r\n            }\r\n        }, { merge: true })\r\n    }\r\n\r\n    // Responsible for reducing item quantity by 1 and later updating that value to the database\r\n    const removeFromCart = async (id) => {\r\n        let removeDishes = [...cartDishIDs]\r\n        let index = removeDishes.indexOf(id)\r\n        if (index > -1) {\r\n            removeDishes.splice(index, 1)\r\n        }\r\n        setCartDishIDs(removeDishes)\r\n        let price = priceHandler(removeDishes)\r\n        updateCart(removeDishes, price)\r\n        // priceHandler(removeDishes)\r\n        // add update Cart i.e. to handle updates on firestore\r\n        // add cartpricehandler i.e. to handle total amount in the cart\r\n    }\r\n\r\n    // Responsible for increasing item quantity by 1 and later updating that value to the database\r\n    const addToCart = (id) => {\r\n        let arr = [...cartDishIDs]\r\n        arr.push(id)\r\n        setCartDishIDs(arr)\r\n        let price = priceHandler(arr)\r\n        updateCart(arr, price)\r\n    }\r\n\r\n\r\n    const RestaurantDetails = () => (\r\n        <View style={restaurantStyles.container}>\r\n            <View style={restaurantStyles.imageContainer}>\r\n                <Image source={{ uri: restaurantData.imageURI }} style={restaurantStyles.image} />\r\n            </View>\r\n            <View>\r\n                <Text style={restaurantStyles.restaurantName}>{restaurantData.restaurantName ? restaurantData.restaurantName : \"Restaurant\"}</Text>\r\n                <View style={restaurantStyles.ratingContainer}>\r\n                    <Entypo name=\"star\" size={16} color={colors.light} style={restaurantStyles.star} />\r\n                    <View>\r\n                        <Text style={restaurantStyles.ratingText}>{restaurantData.rating ? restaurantData.rating : \"Not available\"}</Text>\r\n                    </View>\r\n                </View>\r\n                <View style={restaurantStyles.cuisinesContainer}>\r\n                    <Text style={restaurantStyles.cuisines}>{restaurantData.cuisines}</Text>\r\n                </View>\r\n            </View>\r\n        </View>\r\n    )\r\n\r\n    return (<>\r\n        {isCartEmpty ?\r\n            <View style={emptyCartStyles.container}>\r\n                <div>\r\n                    <Lottie animationData={require('../assets/animations/emptyCart.json')} style={{ width: '90%' }} />\r\n                </div>\r\n                <View style={emptyCartStyles.textContainer}>\r\n                    <Text style={emptyCartStyles.text}>{`My stomach is empty.`}</Text>\r\n                    <Text style={emptyCartStyles.text}>{`Please add some items in it!`}</Text>\r\n                </View>\r\n            </View>\r\n            :\r\n            <View style={styles.container}>\r\n                <RestaurantDetails />\r\n                <FlatList\r\n                    style={{ backgroundColor: colors.dark, paddingHorizontal: 10 }}\r\n                    data={uniqueAllCartDishesData}\r\n                    keyExtractor={item => item.dishID}\r\n                    renderItem={({ item }) => (\r\n                        <DishItem\r\n                            cartDishes={cartDishIDs}\r\n                            dishName={item.name}\r\n                            id={item.dishID}\r\n                            price={item.price}\r\n                            isNonVeg={item.nonveg}\r\n                            getQuantity={getQuantity(item.dishID)}\r\n                            removeFromCart={() => removeFromCart(item.dishID)}\r\n                            addToCart={() => addToCart(item.dishID)}\r\n                        />\r\n                    )}\r\n                />\r\n            </View>\r\n        }\r\n    </>\r\n    )\r\n}\r\n\r\nexport default Cart\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        // margin: 10\r\n    }\r\n})\r\n\r\nconst restaurantStyles = StyleSheet.create({\r\n    container: {\r\n        flexDirection: 'row',\r\n        width: '100%',\r\n        alignItems: 'center',\r\n        borderColor: colors.light,\r\n        borderBottomWidth: 1.5,\r\n        backgroundColor: colors.dark,\r\n        padding: 10,\r\n        marginBottom: 20,\r\n        borderTopWidth: 1.5\r\n    },\r\n    imageContainer: {\r\n        width: 75,\r\n        height: 75,\r\n        marginEnd: 20,\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n    image: {\r\n        width: '100%',\r\n        height: '100%',\r\n        borderRadius: 5\r\n    },\r\n    restaurantName: {\r\n        color: colors.text.default,\r\n        fontWeight: '700',\r\n        fontSize: 16\r\n    },\r\n    ratingContainer:\r\n    {\r\n        flexDirection: 'row',\r\n        alignItems: 'center',\r\n        marginTop: 2\r\n    },\r\n    star: {\r\n        marginRight: 5\r\n    },\r\n    ratingText: {\r\n        fontWeight: '700',\r\n        color: colors.light,\r\n        fontSize: 13,\r\n        textAlign: 'center'\r\n    },\r\n    cuisinesContainer: {\r\n        marginTop: 2\r\n    },\r\n    cuisines: {\r\n        color: colors.light\r\n    }\r\n})\r\n\r\nconst emptyCartStyles = StyleSheet.create({\r\n    container: {\r\n        justifyContent: 'center', alignItems: 'center', flex: 1, width: '100%'\r\n    },\r\n    animation: {\r\n        width: '90%'\r\n    },\r\n    textContainer: {\r\n        alignItems: 'center',\r\n        width: '100%'\r\n    },\r\n    text: {\r\n        color: colors.text.light, fontSize: 18, fontWeight: '700', width: '70%', textAlign: 'center'\r\n    }\r\n})","import { getAuth } from 'firebase/auth'\r\nimport { doc, getDoc, setDoc } from 'firebase/firestore'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { StyleSheet, Text, TextInput, View } from 'react-native'\r\nimport EditButton from '../components/EditButton'\r\nimport PrimaryButton from '../components/PrimaryButton'\r\nimport SecondaryButton from '../components/SecondaryButton'\r\nimport colors from '../constants/colors'\r\nimport { auth, firestore } from '../firebase'\r\n\r\nconst EditAccount = ({route, navigation}) => {\r\n    const auth = getAuth()\r\n    const {toUpdate} = route.params\r\n\r\n    const [nameOfUser, setNameOfUser] = useState('')\r\n    const [email, setEmail] = useState('')\r\n    const [graduation, setGraduation] = useState('')\r\n\r\n    const [editName, setEditName] = useState(false)\r\n    const [editMail, setEditMail] = useState(false)\r\n    const [editGraduation, setEditGraduation] = useState(false)\r\n\r\n    const UID = auth.currentUser.uid\r\n    // const userRef = firestore.collection('users').doc(UID)\r\n    const userRef = doc(firestore, 'users',UID)\r\n\r\n    useEffect(() => {\r\n        const getDetails = async() =>{\r\n            const querySnapshot = await getDoc(userRef)\r\n            let data = querySnapshot.data()\r\n            if (data) {\r\n                if (data.Name){\r\n                    setNameOfUser(data.Name)\r\n                }\r\n                if (data.Email){\r\n                    setEmail(data.Email)\r\n                }\r\n                if (data.graduationYear){\r\n                    setGraduation(data.graduationYear)\r\n                }\r\n\r\n                // get initial input state from firestore\r\n\r\n                // when the user presses cancel on any form, the state should be set to the values from the firestore\r\n            }\r\n        }\r\n        getDetails()\r\n        return\r\n    }, [])\r\n\r\n    const getName = async() =>{\r\n        const querySnapshot = await getDoc(userRef)\r\n        let data = querySnapshot.data()\r\n        if (data){\r\n            if (data.Name){\r\n                setNameOfUser(data.Name)\r\n            }\r\n        }\r\n    }\r\n\r\n    const getEmail = async() =>{\r\n\r\n        const querySnapshot = await getDoc(userRef)\r\n        let data = querySnapshot.data()\r\n        if (data){\r\n            if (data.Email){\r\n                setEmail(data.Email)\r\n            }\r\n        }\r\n    }\r\n\r\n    const getGraduation = async() =>{\r\n        const querySnapshot = await getDoc(userRef)\r\n        let data = querySnapshot.data()\r\n        if (data){\r\n            if (data.graduationYear){\r\n                setGraduation(data.graduationYear)\r\n            }\r\n        }\r\n    }\r\n\r\n    const handleNameUpdate =  () => {\r\n        setDoc(userRef, { Name: nameOfUser }, { merge: true })\r\n        setEditName(false)\r\n        toUpdate(true)\r\n    }\r\n\r\n    const handleMailUpdate = () => {\r\n        setDoc(userRef, { Email: email }, { merge: true })\r\n        setEditMail(false)\r\n        toUpdate(true)\r\n    }\r\n\r\n    const handleGraduationUpdate = () => {\r\n        setDoc(userRef, {graduationYear: parseInt(graduation)},{merge:true})\r\n        setEditGraduation(false)\r\n        toUpdate(true)\r\n    }\r\n\r\n    const NameButtons = () => {\r\n        return (\r\n            <View style={styles.updateAndCancel}>\r\n                <PrimaryButton text=\"Update\" onPress={() => handleNameUpdate()} />\r\n                <SecondaryButton text=\"Cancel\" onPress={() => {\r\n                    setEditName(false)\r\n                    getName()\r\n                    }} />\r\n            </View>\r\n        )\r\n    }\r\n\r\n    const MailButtons = () => {\r\n        return (\r\n            <View style={styles.updateAndCancel}>\r\n                <PrimaryButton text=\"Update\" onPress={() => handleMailUpdate()} />\r\n                <SecondaryButton text=\"Cancel\" onPress={() => {\r\n                    setEditMail(false)\r\n                    getEmail()\r\n                    }} />\r\n            </View>\r\n        )\r\n    }\r\n\r\n    const GraduationButtons = () => {\r\n        return (\r\n            <View style={styles.updateAndCancel}>\r\n                <PrimaryButton text=\"Update\" onPress={() => handleGraduationUpdate()} />\r\n                <SecondaryButton text=\"Cancel\" onPress={() => {\r\n                    setEditGraduation(false)\r\n                    getGraduation()\r\n                    }} />\r\n            </View>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <View>\r\n\r\n            {/* For name */}\r\n            <>\r\n                <View style={[itemStyles.container, { borderColor: editName ? colors.primary : colors.light }]}>\r\n                    <View>\r\n                        <Text style={itemStyles.title}>Name</Text>\r\n                    </View>\r\n                    <View style={itemStyles.inputContainer}>\r\n                        <TextInput\r\n                            style={itemStyles.input}\r\n                            value={nameOfUser}\r\n                            autoComplete=\"name\"\r\n                            placeholderTextColor={colors.text.default}\r\n                            editable={editName ? true : false}\r\n                            onChangeText={(v) => setNameOfUser(v)}\r\n                            autoCapitalize=\"words\"\r\n                        />\r\n                        <EditButton text=\"Edit\" onPress={() => setEditName(!editName)} />\r\n                    </View>\r\n\r\n                </View>\r\n                {editName ? <NameButtons /> : null}\r\n            </>\r\n\r\n            {/* For email */}\r\n            <>\r\n                <View style={[itemStyles.container, { borderColor: editMail ? colors.primary : colors.light }]}>\r\n                    <View>\r\n                        <Text style={itemStyles.title}>Email Address</Text>\r\n                    </View>\r\n                    <View style={itemStyles.inputContainer}>\r\n                        <TextInput\r\n                            style={itemStyles.input}\r\n                            value={email}\r\n                            autoCapitalize=\"none\"\r\n                            autoComplete=\"email\"\r\n                            placeholderTextColor={colors.text.default}\r\n                            editable={editMail ? true : false}\r\n                            onChangeText={(v) => setEmail(v)}\r\n                        />\r\n                        <EditButton text=\"Edit\" onPress={() => setEditMail(!editMail)} />\r\n                    </View>\r\n\r\n                </View>\r\n                {editMail ? <MailButtons /> : null}\r\n            </>\r\n\r\n            {/* For graduation */}\r\n\r\n            <>\r\n                <View style={[itemStyles.container, { borderColor: editGraduation ? colors.primary : colors.light }]}>\r\n                    <View>\r\n                        <Text style={itemStyles.title}>Graduation Year</Text>\r\n                    </View>\r\n                    <View style={itemStyles.inputContainer}>\r\n                        <TextInput\r\n                            style={itemStyles.input}\r\n                            value={graduation.toString()}\r\n                            placeholderTextColor={colors.text.default}\r\n                            editable={editGraduation ? true : false}\r\n                            onChangeText={(v) => setGraduation(v.replace(/[^0-9]/g, ''))}\r\n                            keyboardType={'number-pad'}\r\n                            maxLength={4}\r\n                        />\r\n                        <EditButton text=\"Edit\" onPress={() => setEditGraduation(!editGraduation)} />\r\n                    </View>\r\n\r\n                </View>\r\n                {editGraduation ? <GraduationButtons /> : null}\r\n            </>\r\n\r\n        </View>\r\n    )\r\n}\r\n\r\nexport default EditAccount\r\n\r\nconst styles = StyleSheet.create({\r\n    updateAndCancel:{\r\n        flexDirection: 'row', \r\n        justifyContent: 'space-between', \r\n        marginHorizontal: 25, \r\n        marginBottom: 10\r\n    }\r\n})\r\n\r\nconst itemStyles = StyleSheet.create({\r\n    container: {\r\n        margin: 10,\r\n        borderBottomWidth: 1,\r\n        padding: 5\r\n    },\r\n    title: {\r\n        textTransform: 'uppercase',\r\n        color: colors.text.light,\r\n        fontSize: 12\r\n    },\r\n    inputContainer: {\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between',\r\n    },\r\n    input: {\r\n        width: '75%',\r\n        color: colors.text.default,\r\n        fontWeight: '700',\r\n        fontSize: 15\r\n    }\r\n})\r\n","import React, { useCallback, useEffect, useState } from \"react\";\r\nimport { FlatList, Image, Platform, Pressable, SafeAreaView, StyleSheet, Text, TouchableOpacity, View } from \"react-native\";\r\nimport colors from \"../constants/colors\";\r\nimport { auth, firestore } from \"../firebase\";\r\nimport DishItem from \"../components/DishItem\";\r\nimport { useIsFocused } from \"@react-navigation/core\";\r\nimport { doc, getDoc, setDoc } from \"firebase/firestore\";\r\n\r\n\r\nconst RestaurantScreen = ({ route, navigation }) => {\r\n    const { restaurantID, restaurantName } = route.params;\r\n    useEffect(() => {\r\n        navigation.setOptions({\r\n            headerTitle: restaurantName,\r\n        });\r\n    }, [])\r\n\r\n    const isFocused = useIsFocused()\r\n    // Build a logic to fetch cart items from the database at initial render\r\n    const UID = auth.currentUser.uid\r\n    const userRef = doc(firestore, 'users', UID)\r\n    const restaurantRef = doc(firestore, 'restaurants', restaurantID)\r\n\r\n    const [dishes, setDishes] = useState([])\r\n\r\n    const [cartDishes, setCartDishes] = useState([])\r\n    const [doNotRemoveState, setDoNotRemoveState] = useState(0)\r\n\r\n    const [cartPrice, setCartPrice] = useState(0)\r\n\r\n    // getting the dishes which are added in the cart\r\n    useEffect(() => {\r\n        getDishes()\r\n        getCart()\r\n    }, [isFocused == true])\r\n\r\n    // Gets the array of dishIDs and cart total present in the cart\r\n    const getCart = async () => {\r\n        const querySnapshot = await getDoc(userRef)\r\n        let data = querySnapshot.data()\r\n        if (data.cart){\r\n            if (data.cart.restaurantID == restaurantID) {\r\n                setCartDishes(data.cart.dishes)\r\n                setCartPrice(data.cart.cartTotal)\r\n            }\r\n        }\r\n    }\r\n\r\n    // Updates the cart details like dishes array, cart total, restaurantID in the database \r\n\r\n    const updateCart = () => {\r\n        setDoc(userRef, {\r\n            cart: {\r\n                dishes: cartDishes,\r\n                restaurantID: restaurantID,\r\n                cartTotal: cartPrice\r\n            }\r\n        }, { merge: true })\r\n    }\r\n\r\n    // triggers every time we add an item to the cart\r\n    const addToCart = (id, price) => {\r\n        setDoNotRemoveState(doNotRemoveState + price)\r\n        // Do not remove setDoNotRemoveState as it breaks the functionality even if it not in use\r\n        let arr = cartDishes\r\n        arr.push(id)\r\n        setCartDishes(arr)\r\n        updateCart()\r\n        cartPriceHandler()\r\n    }\r\n\r\n    // Method for getting the cart total amount, updates the state, updates cart total in the database\r\n    const cartPriceHandler = () => {\r\n        let frequency = {}\r\n        for (let num of cartDishes) {\r\n            frequency[num] = frequency[num] ? frequency[num] + 1 : 1\r\n        }\r\n        // This gives me frequency of cart Items as {\"dishID\": occurrences, \"anotherDishID\": occurrences }\r\n\r\n        let priceObj = {}\r\n        dishes.forEach(el => {\r\n            priceObj[el.dishID] = el.price\r\n        })\r\n        // This gives me priceObj as {\"dishID\":itsPrice, \"anotherDishID\":itsPrice}\r\n        let price = 0\r\n        for (let i in priceObj) {\r\n            for (let j in frequency) {\r\n                if (j == i) {\r\n                    price += (priceObj[i] * frequency[j])\r\n                }\r\n            }\r\n        }\r\n        setCartPrice(price)\r\n\r\n        // Seems similar to updateCart but is not. It uses a local variable instead of a state variable to update cart total to the database \r\n        setDoc(userRef, {\r\n            cart: {\r\n                dishes: cartDishes,\r\n                restaurantID: restaurantID,\r\n                cartTotal: price\r\n            }\r\n        }, { merge: true })\r\n    }\r\n\r\n    // triggers every time we remove an item to the cart\r\n    const removeFromCart = (id, price) => {\r\n        let removeDishes = cartDishes\r\n        let index = removeDishes.indexOf(id)\r\n        if (index > -1) {\r\n            removeDishes.splice(index, 1)\r\n        }\r\n        setCartDishes(removeDishes)\r\n        // Do not remove setDoNotRemoveState as it breaks the functionality even if it not in use\r\n        setDoNotRemoveState(doNotRemoveState - price)\r\n        updateCart()\r\n        cartPriceHandler()\r\n    }\r\n\r\n    // Method for getting the amount of same dishes in the cart => returns a number\r\n    const getQuantity = (id) => {\r\n        let array = []\r\n        for (var i of cartDishes) {\r\n            array.push(i)\r\n        }\r\n        let count = {}\r\n        for (let num of array) {\r\n            count[num] = count[num] ? count[num] + 1 : 1\r\n        }\r\n        return (count[id])\r\n    }\r\n\r\n    // gets all the dishes from the restaurant and updates the state to an array of dishIDs\r\n    const getDishes = async() => {\r\n        const querySnapshot = await getDoc(restaurantRef)\r\n        let data = querySnapshot.data()\r\n        let dishesArr = data.dishes\r\n        setDishes(dishesArr)\r\n    }\r\n\r\n    const Cart = () => <View style={[cartStyles.container,\r\n    { display: cartDishes.length == 0 ? \"none\" : \"flex\" }\r\n    ]}>\r\n        {Platform.OS == \"android\"\r\n            ?\r\n            <Pressable onPress={() => {\r\n                navigation.navigate('Cart')\r\n            }} android_ripple={{ color: colors.light, }} style={cartStyles.subContainer}>\r\n                <View>\r\n                    <Text style={cartStyles.detailsText}>{cartDishes.length} Item{cartDishes.length == 1 ? '' : 's'} {/*'s' only when more than one items*/} |  ₹{cartPrice}</Text>\r\n                </View>\r\n                <View>\r\n                    <Text style={cartStyles.text}>Go to cart</Text>\r\n                </View>\r\n            </Pressable>\r\n            :\r\n            <TouchableOpacity onPress={() => {\r\n                navigation.navigate('Cart')\r\n            }} style={cartStyles.subContainer}>\r\n                <View>\r\n                    <Text style={cartStyles.detailsText}>{cartDishes.length} Item{cartDishes.length == 1 ? '' : 's'} {/*'s' only when more than one items*/} |  ₹{cartPrice}</Text>\r\n                </View>\r\n                <View>\r\n                    <Text style={cartStyles.text}>Go to cart</Text>\r\n                </View>\r\n            </TouchableOpacity>\r\n\r\n        }\r\n        {/* Add conditional touchable opacity support for ios devices  */}\r\n\r\n    </View>\r\n\r\n    return (\r\n        <SafeAreaView style={styles.container}>\r\n            <FlatList\r\n                data={dishes}\r\n                renderItem={({ item }) =>\r\n                    <DishItem\r\n                        cartDishes={cartDishes}\r\n                        dishName={item.name}\r\n                        isNonVeg={item.nonveg}\r\n                        getQuantity={getQuantity(item.dishID)}\r\n                        price={item.price}\r\n                        description={item.description}\r\n                        image={item.imageURI}\r\n                        id={item.dishID}\r\n                        addToCart={() => addToCart(item.dishID, item.price)}\r\n                        removeFromCart={() => removeFromCart(item.dishID, item.price)}\r\n                    />\r\n                }\r\n                keyExtractor={item => item.dishID}\r\n            />\r\n            <Cart />\r\n        </SafeAreaView>\r\n    );\r\n};\r\n\r\nexport default RestaurantScreen;\r\n\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        flex: 1,\r\n        margin: 10,\r\n    },\r\n});\r\n\r\n\r\nconst cartStyles = StyleSheet.create({\r\n    container: {\r\n        borderRadius: 10,\r\n        backgroundColor: colors.primary,\r\n        overflow: 'hidden',\r\n        height: 50,\r\n        marginHorizontal: 20,\r\n        marginBottom: 10,\r\n    },\r\n    subContainer: {\r\n        paddingHorizontal: 20,\r\n        height: '100%',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        flexDirection: 'row',\r\n        justifyContent: 'space-between'\r\n    },\r\n    detailsText: {\r\n        color: colors.text.dark,\r\n        fontWeight: '700',\r\n    },\r\n    text: {\r\n        color: colors.text.dark,\r\n        textTransform: 'uppercase',\r\n        fontWeight: '700',\r\n    }\r\n})","const config = {\r\n    screens: {\r\n        Explore: {\r\n            path: \"Explore\"\r\n        },\r\n        Account: {\r\n            path: \"Account\"\r\n        },\r\n        Cart: {\r\n            path: \"Cart\"\r\n        },\r\n        Restaurant_Screen: {\r\n            path: \"Restaurant/:restaurantID/:restaurantName\",\r\n        },\r\n        Login: {\r\n            path: \"auth\"\r\n        }\r\n    }\r\n}\r\n\r\nconst linking = {\r\n    prefixes: [\"demo://app\"],\r\n    config\r\n}\r\n\r\nexport default linking","import { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\r\nimport { DefaultTheme, NavigationContainer } from '@react-navigation/native'\r\nimport { createNativeStackNavigator } from '@react-navigation/native-stack'\r\nimport React, { useEffect, useState } from 'react'\r\nimport { Platform, StyleSheet, Text, View } from 'react-native'\r\nimport Account from '../screens/Account'\r\nimport Explore from '../screens/Explore'\r\nimport LoginScreen from '../screens/LoginScreen'\r\nimport { Entypo } from '@expo/vector-icons';\r\nimport { MaterialCommunityIcons } from '@expo/vector-icons';\r\nimport Cart from '../screens/Cart'\r\nimport colors from '../constants/colors'\r\nimport { auth, firestore } from '../firebase'\r\nimport EditAccount from '../screens/EditAccount'\r\nimport RestaurantScreen from '../screens/RestaurantScreen'\r\nimport { useIsFocused, useNavigation } from '@react-navigation/core';\r\nimport LottieView from 'lottie-react-native';\r\nimport { doc, getDoc } from \"firebase/firestore\";\r\nimport { onAuthStateChanged } from 'firebase/auth'\r\nimport Lottie from 'lottie-react';\r\nimport linking from './linking'\r\n\r\nconst Stack = createNativeStackNavigator()\r\nconst Tab = createBottomTabNavigator();\r\nconst Home = () => {\r\n\r\n    const navigation = useNavigation()\r\n    const isFocused = useIsFocused()\r\n\r\n    const UID = auth.currentUser.uid\r\n    const [badgeNumber, setBadgeNumber] = useState(0)\r\n    const userRef = doc(firestore, 'users', UID)\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = navigation.addListener('focus', () => {\r\n            // The screen is focused\r\n            // Call any action\r\n            const setCartQuantity = async () => {\r\n                const querySnapshot = await getDoc(userRef)\r\n                let data = querySnapshot.data()\r\n                setBadgeNumber(data.cart.dishes.length)\r\n            }\r\n            setCartQuantity()\r\n        });\r\n\r\n        // Return the function to unsubscribe from the event so it gets removed on unmount\r\n        return unsubscribe;\r\n    }, [isFocused]);\r\n\r\n    return (\r\n        <Tab.Navigator screenOptions={({ route }) => ({\r\n            tabBarIcon: ({ focused }) => {\r\n                let icon;\r\n                if (route.name === \"Explore\") {\r\n                    icon = <Entypo name=\"home\" size={24} color={focused ? colors.primary : colors.light} />\r\n                }\r\n                else if (route.name === \"Account\") {\r\n                    icon = <MaterialCommunityIcons name=\"account\" size={24} color={focused ? colors.primary : colors.light} />\r\n                }\r\n                else if (route.name === \"Cart\") {\r\n                    icon = <Entypo name=\"shopping-bag\" size={24} color={focused ? colors.primary : colors.light} />\r\n                }\r\n                return icon;\r\n            }\r\n        })}>\r\n            <Tab.Screen name=\"Explore\" component={Explore} />\r\n            <Tab.Screen name=\"Cart\" component={Cart} options={{ tabBarBadge: 50 }} />\r\n            <Tab.Screen name=\"Account\" component={Account} />\r\n        </Tab.Navigator>\r\n    )\r\n}\r\n\r\nconst MyTheme = {\r\n    dark: true,\r\n    colors: {\r\n        ...DefaultTheme.colors,\r\n        primary: colors.primary,\r\n        background: colors.background,\r\n        card: colors.dark,\r\n        text: 'white'\r\n    },\r\n};\r\n\r\nconst RootNavigator = () => {\r\n\r\n    const [isUserSignedIn, setIsUserSignedIn] = useState(false)\r\n    const [isLoading, setIsLoading] = useState(true)\r\n    useEffect(() => {\r\n        const script = document.createElement(\"script\")\r\n        script.src = \"https://unpkg.com/@lottiefiles/lottie-player@latest/dist/lottie-player.js\"\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, user => {\r\n            if (user) {\r\n                setIsUserSignedIn(true)\r\n            }\r\n            else {\r\n                setIsUserSignedIn(false)\r\n            }\r\n            setTimeout(() => {\r\n                setIsLoading(false)\r\n            }, 50)\r\n            // setIsLoading(false)\r\n            // setTimeout(() => {\r\n            //     setIsLoading(false)\r\n            // }, 1200);\r\n        })\r\n        return unsubscribe\r\n    }, [])\r\n\r\n    const AuthStack = createNativeStackNavigator()\r\n    const AuthStackScreen = () => (\r\n        <AuthStack.Navigator>\r\n            <AuthStack.Screen name=\"Login\" component={LoginScreen} />\r\n        </AuthStack.Navigator>\r\n    )\r\n\r\n    const AppStack = createNativeStackNavigator()\r\n    const AppStackScreen = () => (\r\n        <View style={{ backgroundColor: colors.background, flex: 1 }}>\r\n            <AppStack.Navigator \r\n            screenOptions={{animation:\"slide_from_right\"}}\r\n            >\r\n                <AppStack.Screen name=\"Home\" component={Home} options={{ headerShown: false }} />\r\n                <AppStack.Screen name=\"Edit_Account\" component={EditAccount} options={{ title: \"Edit Account\" }} />\r\n                <AppStack.Screen name=\"Restaurant_Screen\" component={RestaurantScreen} />\r\n                <AppStack.Screen name=\"Cart\" component={Cart} />\r\n            </AppStack.Navigator>\r\n        </View>\r\n    )\r\n\r\n    return (\r\n        <NavigationContainer linking={linking} theme={MyTheme}>\r\n            <View style={{ backgroundColor: colors.background, flex: 1 }}>\r\n                {isLoading ?\r\n                    <div style={{flex:1, justifyContent:'center', display:'flex'}}>\r\n                        <Lottie animationData={require('../assets/animations/logo.json')}/>\r\n                    </div> :\r\n                    isUserSignedIn ? <AppStackScreen /> : <AuthStackScreen />\r\n                }\r\n            </View>\r\n        </NavigationContainer>\r\n    )\r\n}\r\n\r\nexport default RootNavigator\r\n\r\nconst styles = StyleSheet.create({})\r\n","import { StatusBar } from 'expo-status-bar';\r\nimport React from 'react';\r\nimport { LogBox, View } from 'react-native';\r\nimport colors from './constants/colors';\r\nimport RootNavigator from './navigation/RootNavigator';\r\n\r\nexport default function App() {\r\n  LogBox.ignoreAllLogs()\r\n  return (\r\n    <>\r\n      <StatusBar style=\"light\" backgroundColor={colors.dark} />\r\n      <RootNavigator />\r\n    </>\r\n  );\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/nonveg.352531a6.png\";","module.exports = __webpack_public_path__ + \"static/media/veg.0f6892d0.png\";"],"sourceRoot":""}